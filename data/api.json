{
  "love.graphics.getRendererInfo":{
    "type":"function",
    "snippet":"love.graphics.getRendererInfo()",
    "url":"https://love2d.org/wiki/love.graphics.getRendererInfo",
    "description":"Gets information about the system's video card and drivers."
  },
  "love.window.showMessageBox":{
    "type":"function",
    "snippet":"love.window.showMessageBox(${1:title}, ${2:message}, ${3:type}, ${4:attachtowindow})",
    "url":"https://love2d.org/wiki/love.window.showMessageBox",
    "description":"Displays a message box dialog above the love window. The message box contains a title, optional text, and buttons."
  },
  "love.window.minimize":{
    "type":"function",
    "snippet":"love.window.minimize()",
    "url":"https://love2d.org/wiki/love.window.minimize",
    "description":"Minimizes the window to the system's task bar / dock."
  },
  "love.timer.sleep":{
    "type":"function",
    "snippet":"love.timer.sleep(${1:s})",
    "url":"https://love2d.org/wiki/love.timer.sleep",
    "description":"Sleeps the program for the specified amount of time."
  },
  "love.physics.newBody":{
    "type":"function",
    "snippet":"love.physics.newBody(${1:world}, ${2:x}, ${3:y}, ${4:type})",
    "url":"https://love2d.org/wiki/love.physics.newBody",
    "description":"Creates a new body.\n\nThere are three types of bodies. Static bodies do not move, have a infinite mass, and can be used for level boundaries. Dynamic bodies are the main actors in the simulation, they collide with everything. Kinematic bodies do not react to forces and only collide with dynamic bodies.\n\nThe mass of the body gets calculated when a Fixture is attached or removed, but can be changed at any time with Body:setMass or Body:resetMassData."
  },
  "love.filesystem.lines":{
    "type":"function",
    "snippet":"love.filesystem.lines(${1:name})",
    "url":"https://love2d.org/wiki/love.filesystem.lines",
    "description":"Iterate over the lines in a file."
  },
  "love.math.linearToGamma":{
    "type":"function",
    "snippet":"love.math.linearToGamma(${1:lr}, ${2:lg}, ${3:lb})",
    "url":"https://love2d.org/wiki/love.math.linearToGamma",
    "description":"Converts a color from linear-space (RGB) to gamma-space (sRGB). This is useful when storing linear RGB color values in an image, because the linear RGB color space has less precision than sRGB for dark colors, which can result in noticeable color banding when drawing.\n\nIn general, colors chosen based on what they look like on-screen are already in gamma-space and should not be double-converted. Colors calculated using math are often in the linear RGB space."
  },
  "love.touch.getPressure":{
    "type":"function",
    "snippet":"love.touch.getPressure(${1:id})",
    "url":"https://love2d.org/wiki/love.touch.getPressure",
    "description":"Gets the current pressure of the specified touch-press."
  },
  "love.physics":{
    "type":"module",
    "url":"https://love2d.org/wiki/love.physics",
    "description":"Can simulate 2D rigid body physics in a realistic manner. This module is based on Box2D, and this API corresponds to the Box2D API as closely as possible."
  },
  "love.image.newImageData":{
    "type":"function",
    "snippet":"love.image.newImageData(${1:width}, ${2:height})",
    "url":"https://love2d.org/wiki/love.image.newImageData",
    "description":"Create a new ImageData object."
  },
  "love.math.getRandomSeed":{
    "type":"function",
    "snippet":"love.math.getRandomSeed()",
    "url":"https://love2d.org/wiki/love.math.getRandomSeed",
    "description":"Gets the seed of the random number generator.\n\nThe state is split into two numbers due to Lua's use of doubles for all number values - doubles can't accurately represent integer values above 2^53."
  },
  "love.filesystem.isFile":{
    "type":"function",
    "snippet":"love.filesystem.isFile(${1:path})",
    "url":"https://love2d.org/wiki/love.filesystem.isFile",
    "description":"Check whether something is a file."
  },
  "love.system.openURL":{
    "type":"function",
    "snippet":"love.system.openURL(${1:url})",
    "url":"https://love2d.org/wiki/love.system.openURL",
    "description":"Opens a URL with the user's web or file browser."
  },
  "love.graphics.line":{
    "type":"function",
    "snippet":"love.graphics.line(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:...})",
    "url":"https://love2d.org/wiki/love.graphics.line",
    "description":"Draws lines between points."
  },
  "love.audio.play":{
    "type":"function",
    "snippet":"love.audio.play(${1:source})",
    "url":"https://love2d.org/wiki/love.audio.play",
    "description":"Plays the specified Source."
  },
  "love.mouse.setX":{
    "type":"function",
    "snippet":"love.mouse.setX(${1:x})",
    "url":"https://love2d.org/wiki/love.mouse.setX",
    "description":"Sets the current X position of the mouse."
  },
  "love.graphics.printf":{
    "type":"function",
    "snippet":"love.graphics.printf(${1:text}, ${2:x}, ${3:y}, ${4:limit}, ${5:align}, ${6:r}, ${7:sx}, ${8:sy}, ${9:ox}, ${10:oy}, ${11:kx}, ${12:ky})",
    "url":"https://love2d.org/wiki/love.graphics.printf",
    "description":"Draws formatted text, with word wrap and alignment.\n\nSee additional notes in love.graphics.print."
  },
  "love.physics.newCircleShape":{
    "type":"function",
    "snippet":"love.physics.newCircleShape(${1:radius})",
    "url":"https://love2d.org/wiki/love.physics.newCircleShape",
    "description":"Creates a new CircleShape."
  },
  "love.gamepadreleased":{
    "type":"callback",
    "snippet":"function love.gamepadreleased(${1:joystick}, ${2:button})\n\t${0:-- body...}\nend",
    "url":"https://love2d.org/wiki/love.gamepadreleased",
    "description":"Called when a Joystick's virtual gamepad button is released."
  },
  "love.audio.setOrientation":{
    "type":"function",
    "snippet":"love.audio.setOrientation(${1:fx}, ${2:fy}, ${3:fz}, ${4:ux}, ${5:uy}, ${6:uz})",
    "url":"https://love2d.org/wiki/love.audio.setOrientation",
    "description":"Sets the orientation of the listener."
  },
  "love.physics.newMouseJoint":{
    "type":"function",
    "snippet":"love.physics.newMouseJoint(${1:body}, ${2:x}, ${3:y})",
    "url":"https://love2d.org/wiki/love.physics.newMouseJoint",
    "description":"Create a joint between a body and the mouse.\n\nThis joint actually connects the body to a fixed point in the world. To make it follow the mouse, the fixed point must be updated every timestep (example below).\n\nThe advantage of using a MouseJoint instead of just changing a body position directly is that collisions and reactions to other joints are handled by the physics engine."
  },
  "love.audio.getOrientation":{
    "type":"function",
    "snippet":"love.audio.getOrientation()",
    "url":"https://love2d.org/wiki/love.audio.getOrientation",
    "description":"Returns the orientation of the listener."
  },
  "love.audio.setPosition":{
    "type":"function",
    "snippet":"love.audio.setPosition(${1:x}, ${2:y}, ${3:z})",
    "url":"https://love2d.org/wiki/love.audio.setPosition",
    "description":"Sets the position of the listener, which determines how sounds play."
  },
  "love.filesystem.getIdentity":{
    "type":"function",
    "snippet":"love.filesystem.getIdentity(${1:name})",
    "url":"https://love2d.org/wiki/love.filesystem.getIdentity",
    "description":"Gets the write directory name for your game. Note that this only returns the name of the folder to store your files in, not the full location."
  },
  "love.image.newCompressedData":{
    "type":"function",
    "snippet":"love.image.newCompressedData(${1:filename})",
    "url":"https://love2d.org/wiki/love.image.newCompressedData",
    "description":"Create a new CompressedImageData object from a compressed image file. LÃ–VE supports several compressed texture formats, enumerated in the CompressedImageFormat page."
  },
  "love.filesystem.areSymlinksEnabled":{
    "type":"function",
    "snippet":"love.filesystem.areSymlinksEnabled()",
    "url":"https://love2d.org/wiki/love.filesystem.areSymlinksEnabled",
    "description":"Gets whether love.filesystem follows symbolic links."
  },
  "love.graphics.getWidth":{
    "type":"function",
    "snippet":"love.graphics.getWidth()",
    "url":"https://love2d.org/wiki/love.graphics.getWidth",
    "description":"Gets the width of the window."
  },
  "love.graphics.setPointSize":{
    "type":"function",
    "snippet":"love.graphics.setPointSize(${1:size})",
    "url":"https://love2d.org/wiki/love.graphics.setPointSize",
    "description":"Sets the point size."
  },
  "love.audio":{
    "type":"module",
    "url":"https://love2d.org/wiki/love.audio",
    "description":"Provides an interface to create noise with the user's speakers."
  },
  "love.graphics.getCanvasFormats":{
    "type":"function",
    "snippet":"love.graphics.getCanvasFormats()",
    "url":"https://love2d.org/wiki/love.graphics.getCanvasFormats",
    "description":"Gets the available Canvas formats, and whether each is supported."
  },
  "love.graphics.getBlendMode":{
    "type":"function",
    "snippet":"love.graphics.getBlendMode()",
    "url":"https://love2d.org/wiki/love.graphics.getBlendMode",
    "description":"Gets the blending mode."
  },
  "love.joystick.loadGamepadMappings":{
    "type":"function",
    "snippet":"love.joystick.loadGamepadMappings(${1:filename})",
    "url":"https://love2d.org/wiki/love.joystick.loadGamepadMappings",
    "description":"Loads a gamepad mappings string or file created with love.joystick.saveGamepadMappings."
  },
  "love.focus":{
    "type":"callback",
    "snippet":"function love.focus(${1:f})\n\t${0:-- body...}\nend",
    "url":"https://love2d.org/wiki/love.focus",
    "description":"Callback function triggered when window receives or loses focus."
  },
  "love.graphics.newParticleSystem":{
    "type":"function",
    "snippet":"love.graphics.newParticleSystem(${1:texture}, ${2:buffer})",
    "url":"https://love2d.org/wiki/love.graphics.newParticleSystem",
    "description":"Creates a new ParticleSystem."
  },
  "love.touchmoved":{
    "type":"callback",
    "snippet":"function love.touchmoved(${1:id}, ${2:x}, ${3:y}, ${4:pressure})\n\t${0:-- body...}\nend",
    "url":"https://love2d.org/wiki/love.touchmoved",
    "description":"Callback function triggered when a touch press moves inside the touch screen."
  },
  "love.graphics.setStencilTest":{
    "type":"function",
    "snippet":"love.graphics.setStencilTest(${1:enable}, ${2:invert})",
    "url":"https://love2d.org/wiki/love.graphics.setStencilTest",
    "description":"Enables or disables stencil testing.\n\nWhen stencil testing is enabled, the geometry of everything that is drawn will be clipped / stencilled out based on whether it intersects with what has been previously drawn to the stencil buffer via love.graphics.stencil.\n\nEach Canvas has its own stencil buffer."
  },
  "love.mouse.getY":{
    "type":"function",
    "snippet":"love.mouse.getY()",
    "url":"https://love2d.org/wiki/love.mouse.getY",
    "description":"Returns the current y position of the mouse."
  },
  "love.filesystem.isDirectory":{
    "type":"function",
    "snippet":"love.filesystem.isDirectory(${1:path})",
    "url":"https://love2d.org/wiki/love.filesystem.isDirectory",
    "description":"Check whether something is a directory."
  },
  "love.quit":{
    "type":"callback",
    "snippet":"function love.quit()\n\t${0:-- body...}\nend",
    "url":"https://love2d.org/wiki/love.quit",
    "description":"Callback function triggered when the game is closed."
  },
  "love.filesystem.getSize":{
    "type":"function",
    "snippet":"love.filesystem.getSize(${1:filename})",
    "url":"https://love2d.org/wiki/love.filesystem.getSize",
    "description":"Gets the size in bytes of a file."
  },
  "love.audio.setVolume":{
    "type":"function",
    "snippet":"love.audio.setVolume(${1:volume})",
    "url":"https://love2d.org/wiki/love.audio.setVolume",
    "description":"Sets the master volume."
  },
  "love.thread.newThread":{
    "type":"function",
    "snippet":"love.thread.newThread(${1:filename})",
    "url":"https://love2d.org/wiki/love.thread.newThread",
    "description":"Creates a new Thread from a File or Data object."
  },
  "love.graphics.getSystemLimits":{
    "type":"function",
    "snippet":"love.graphics.getSystemLimits()",
    "url":"https://love2d.org/wiki/love.graphics.getSystemLimits",
    "description":"Gets the system-dependent maximum values for love.graphics features."
  },
  "love.graphics.draw":{
    "type":"function",
    "snippet":"love.graphics.draw(${1:drawable}, ${2:x}, ${3:y}, ${4:r}, ${5:sx}, ${6:sy}, ${7:ox}, ${8:oy}, ${9:kx}, ${10:ky})",
    "url":"https://love2d.org/wiki/love.graphics.draw",
    "description":"Draws objects on screen. Drawable objects are loaded images, but may be other kinds of Drawable objects, such as a ParticleSystem.\n\nIn addition to simple drawing, this function can rotate and scale the object at the same time, as well as offset the image (for example, to center the image at the chosen coordinates).\n\nlove.graphics.draw anchors from the top left corner by default.\n\nYou can specify a negative value for sx or sy to flip the drawable horizontally or vertically.\n\nThe pivotal point is (x, y) on the screen and (ox, oy) in the internal coordinate system of the drawable object, before rotation and scaling. The object is scaled by (sx, sy), then rotated by r around the pivotal point.\n\nThe origin offset values are most often used to shift the images up and left by half of its height and width, so that (effectively) the specified x and y coordinates are where the center of the image will end up."
  },
  "love.graphics.reset":{
    "type":"function",
    "snippet":"love.graphics.reset()",
    "url":"https://love2d.org/wiki/love.graphics.reset",
    "description":"Resets the current graphics settings.\n\nCalling reset makes the current drawing color white, the current background color black, resets any active Canvas or Shader, and removes any scissor settings. It sets the BlendMode to alpha. It also sets both the point and line drawing modes to smooth and their sizes to 1.0."
  },
  "love.graphics.pop":{
    "type":"function",
    "snippet":"love.graphics.pop()",
    "url":"https://love2d.org/wiki/love.graphics.pop",
    "description":"Pops the current coordinate transformation from the transformation stack.\n\nThis function is always used to reverse a previous push operation. It returns the current transformation state to what it was before the last preceding push. For an example, see the description of love.graphics.push."
  },
  "love.graphics":{
    "type":"module",
    "url":"https://love2d.org/wiki/love.graphics",
    "description":"The primary responsibility for the love.graphics module is the drawing of lines, shapes, text, Images and other Drawable objects onto the screen. Its secondary responsibilities include loading external files (including Images and Fonts) into memory, creating specialized objects (such as ParticleSystems or Framebuffers) and managing screen geometry.\n\nLÃ–VE's coordinate system is rooted in the upper-left corner of the screen, which is at location (0, 0). The x-axis is horizontal: larger values are further to the right. The y-axis is vertical: larger values are further towards the bottom.\n\nIn many cases, you draw images or shapes in terms of their upper-left corner (See the picture above).\n\nMany of the functions are used to manipulate the graphics coordinate system, which is essentially the way coordinates are mapped to the display. You can change the position, scale, and even rotation in this way."
  },
  "love.mouse.isGrabbed":{
    "type":"function",
    "snippet":"love.mouse.isGrabbed()",
    "url":"https://love2d.org/wiki/love.mouse.isGrabbed",
    "description":"Checks if the mouse is grabbed."
  },
  "love.graphics.push":{
    "type":"function",
    "snippet":"love.graphics.push()",
    "url":"https://love2d.org/wiki/love.graphics.push",
    "description":"Copies and pushes the current coordinate transformation to the transformation stack.\n\nThis function is always used to prepare for a corresponding pop operation later. It stores the current coordinate transformation state into the transformation stack and keeps it active. Later changes to the transformation can be undone by using the pop operation, which returns the coordinate transform to the state it was in before calling push."
  },
  "love.filesystem.newFileData":{
    "type":"function",
    "snippet":"love.filesystem.newFileData(${1:contents}, ${2:name}, ${3:decoder})",
    "url":"https://love2d.org/wiki/love.filesystem.newFileData",
    "description":"Creates a new FileData object."
  },
  "love.math.gammaToLinear":{
    "type":"function",
    "snippet":"love.math.gammaToLinear(${1:r}, ${2:g}, ${3:b})",
    "url":"https://love2d.org/wiki/love.math.gammaToLinear",
    "description":"Converts a color from gamma-space (sRGB) to linear-space (RGB). This is useful when doing gamma-correct rendering using colors created based on what they look like on-screen.\n\nGamma-space sRGB has more precision in the lower end than linear RGB. Using this function to convert from sRGB to RGB can result in non-integer color values, which get truncated to integers and lose precision when used with other functions such as love.graphics.setColor."
  },
  "love.filesystem.append":{
    "type":"function",
    "snippet":"love.filesystem.append(${1:name}, ${2:data}, ${3:size})",
    "url":"https://love2d.org/wiki/love.filesystem.append",
    "description":"Append data to an existing file."
  },
  "love.graphics.shear":{
    "type":"function",
    "snippet":"love.graphics.shear(${1:kx}, ${2:ky})",
    "url":"https://love2d.org/wiki/love.graphics.shear",
    "description":"Shears the coordinate system."
  },
  "love.graphics.newImageFont":{
    "type":"function",
    "snippet":"love.graphics.newImageFont(${1:filename}, ${2:glyphs})",
    "url":"https://love2d.org/wiki/love.graphics.newImageFont",
    "description":"Creates a new Font by loading a specifically formatted image. There can be up to 256 glyphs.\n\nIn versions prior to 0.9.0, LÃ–VE expects ISO 8859-1 encoding for the glyphs string."
  },
  "love.graphics.newImage":{
    "type":"function",
    "snippet":"love.graphics.newImage(${1:filename})",
    "url":"https://love2d.org/wiki/love.graphics.newImage",
    "description":"Creates a new Image from a filepath, FileData, an ImageData, or a CompressedImageData."
  },
  "love.joystickaxis":{
    "type":"callback",
    "snippet":"function love.joystickaxis(${1:joystick}, ${2:axis}, ${3:value})\n\t${0:-- body...}\nend",
    "url":"https://love2d.org/wiki/love.joystickaxis",
    "description":"Called when a joystick axis moves."
  },
  "love.window.isCreated":{
    "type":"function",
    "snippet":"love.window.isCreated()",
    "url":"https://love2d.org/wiki/love.window.isCreated",
    "description":"Checks if the window has been created."
  },
  "love.physics.newPolygonShape":{
    "type":"function",
    "snippet":"love.physics.newPolygonShape(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:...})",
    "url":"https://love2d.org/wiki/love.physics.newPolygonShape",
    "description":"Creates a new PolygonShape.\n\nThis shape can have 8 vertices at most, and must form a convex shape."
  },
  "love.keyboard.getKeyFromScancode":{
    "type":"function",
    "snippet":"love.keyboard.getKeyFromScancode(${1:scancode})",
    "url":"https://love2d.org/wiki/love.keyboard.getKeyFromScancode",
    "description":"Gets the key corresponding to the given hardware scancode.\n\nThe location of a key is based on the keyboard's current language layout, whereas scancodes are the layout-independent representations of where the physical keys are.\n\nFor example, the key located where \"q\" is on a U.S. keyboard has the scancode \"q\". When using a U.S. keyboard layout it produces the key \"q\", but when using a French keyboard layout it produces the key \"a\".\n\nScancodes are useful for creating default controls that have the same physical locations on on all systems."
  },
  "love.graphics.setLineWidth":{
    "type":"function",
    "snippet":"love.graphics.setLineWidth(${1:width})",
    "url":"https://love2d.org/wiki/love.graphics.setLineWidth",
    "description":"Sets the line width."
  },
  "love.window.isDisplaySleepEnabled":{
    "type":"function",
    "snippet":"love.window.isDisplaySleepEnabled()",
    "url":"https://love2d.org/wiki/love.window.isDisplaySleepEnabled",
    "description":"Gets whether the display is allowed to sleep while the program is running.\n\nDisplay sleep is disabled by default. Some types of input (e.g. joystick button presses) might not prevent the display from sleeping, if display sleep is allowed."
  },
  "love.math.compress":{
    "type":"function",
    "snippet":"love.math.compress(${1:rawstring}, ${2:format}, ${3:level})",
    "url":"https://love2d.org/wiki/love.math.compress",
    "description":"Compresses a string or data using a specific compression algorithm."
  },
  "love.resize":{
    "type":"callback",
    "snippet":"function love.resize(${1:w}, ${2:h})\n\t${0:-- body...}\nend",
    "url":"https://love2d.org/wiki/love.resize",
    "description":"Called when the window is resized, for example if the user resizes the window, or if love.window.setMode is called with an unsupported width or height in fullscreen and the window chooses the closest appropriate size.\n\nCalls to love.window.setMode will only trigger this event if the width or height of the window after the call doesn't match the requested width and height. This can happen if a fullscreen mode is requested which doesn't match any supported mode, or if the fullscreen type is 'desktop' and the requested width or height don't match the desktop resolution."
  },
  "love.mouse.isVisible":{
    "type":"function",
    "snippet":"love.mouse.isVisible()",
    "url":"https://love2d.org/wiki/love.mouse.isVisible",
    "description":"Checks if the cursor is visible."
  },
  "love.audio.resume":{
    "type":"function",
    "snippet":"love.audio.resume()",
    "url":"https://love2d.org/wiki/love.audio.resume",
    "description":"Resumes all audio"
  },
  "love.graphics.newSpriteBatch":{
    "type":"function",
    "snippet":"love.graphics.newSpriteBatch(${1:texture}, ${2:size}, ${3:usage})",
    "url":"https://love2d.org/wiki/love.graphics.newSpriteBatch",
    "description":"Creates a new SpriteBatch object."
  },
  "love.window.getIcon":{
    "type":"function",
    "snippet":"love.window.getIcon()",
    "url":"https://love2d.org/wiki/love.window.getIcon",
    "description":"Gets the window icon."
  },
  "love.keyboard.setTextInput":{
    "type":"function",
    "snippet":"love.keyboard.setTextInput(${1:enable})",
    "url":"https://love2d.org/wiki/love.keyboard.setTextInput",
    "description":"Enables or disables text input events. It is enabled by default on Windows, Mac, and Linux, and disabled by default on iOS and Android."
  },
  "love.event.pump":{
    "type":"function",
    "snippet":"love.event.pump()",
    "url":"https://love2d.org/wiki/love.event.pump",
    "description":"Pump events into the event queue. This is a low-level function, and is usually not called by the user, but by love.run. Note that this does need to be called for any OS to think you're still running, and if you want to handle OS-generated events at all (think callbacks). love.event.pump can only be called from the main thread, but afterwards, the rest of love.event can be used from any other thread."
  },
  "love.graphics.getStencilTest":{
    "type":"function",
    "snippet":"love.graphics.getStencilTest()",
    "url":"https://love2d.org/wiki/love.graphics.getStencilTest",
    "description":"Gets whether stencil testing is enabled.\n\nWhen stencil testing is enabled, the geometry of everything that is drawn will be clipped / stencilled out based on whether it intersects with what has been previously drawn to the stencil buffer.\n\nEach Canvas has its own stencil buffer."
  },
  "love.graphics.setBlendMode":{
    "type":"function",
    "snippet":"love.graphics.setBlendMode(${1:mode})",
    "url":"https://love2d.org/wiki/love.graphics.setBlendMode",
    "description":"Sets the blending mode."
  },
  "love.physics.newFrictionJoint":{
    "type":"function",
    "snippet":"love.physics.newFrictionJoint(${1:body1}, ${2:body2}, ${3:x}, ${4:y}, ${5:collideConnected})",
    "url":"https://love2d.org/wiki/love.physics.newFrictionJoint",
    "description":"Create a friction joint between two bodies. A FrictionJoint applies friction to a body."
  },
  "love.math.newBezierCurve":{
    "type":"function",
    "snippet":"love.math.newBezierCurve(${1:vertices})",
    "url":"https://love2d.org/wiki/love.math.newBezierCurve",
    "description":"Creates a new BezierCurve object.\n\nThe number of vertices in the control polygon determines the degree of the curve, e.g. three vertices define a quadratic (degree 2) BÃ©zier curve, four vertices define a cubic (degree 3) BÃ©zier curve, etc."
  },
  "love.graphics.setScissor":{
    "type":"function",
    "snippet":"love.graphics.setScissor()",
    "url":"https://love2d.org/wiki/love.graphics.setScissor",
    "description":"Sets or disables scissor.\n\nThe scissor limits the drawing area to a specified rectangle. This affects all graphics calls, including love.graphics.clear."
  },
  "love.graphics.getFSAA":{
    "type":"function",
    "snippet":"love.graphics.getFSAA()",
    "url":"https://love2d.org/wiki/love.graphics.getFSAA",
    "description":"Gets the number of antialiasing samples used when drawing to the Canvas.\n\nThis may be different than the number used as an argument to love.graphics.newCanvas if the system running LÃ–VE doesn't support that number."
  },
  "love.filesystem.newFile":{
    "type":"function",
    "snippet":"love.filesystem.newFile(${1:filename}, ${2:mode})",
    "url":"https://love2d.org/wiki/love.filesystem.newFile",
    "description":"Creates a new File object. It needs to be opened before it can be accessed."
  },
  "love.event.poll":{
    "type":"function",
    "snippet":"love.event.poll()",
    "url":"https://love2d.org/wiki/love.event.poll",
    "description":"Returns an iterator for messages in the event queue."
  },
  "love.graphics.print":{
    "type":"function",
    "snippet":"love.graphics.print(${1:text}, ${2:x}, ${3:y}, ${4:r}, ${5:sx}, ${6:sy}, ${7:ox}, ${8:oy}, ${9:kx}, ${10:ky})",
    "url":"https://love2d.org/wiki/love.graphics.print",
    "description":"Draws text on screen. If no Font is set, one will be created and set (once) if needed.\n\nWhen using translation and scaling functions while drawing text, this function assumes the scale occurs first. If you don't script with this in mind, the text won't be in the right position, or possibly even on screen.\n\nlove.graphics.print stops at the first '\u0000' (null) character. This can bite you if you are appending keystrokes to form your string, as some of those are multi-byte unicode characters which will likely contain null bytes."
  },
  "love.filesystem.getWorkingDirectory":{
    "type":"function",
    "snippet":"love.filesystem.getWorkingDirectory()",
    "url":"https://love2d.org/wiki/love.filesystem.getWorkingDirectory",
    "description":"Gets the current working directory."
  },
  "love.graphics.getFont":{
    "type":"function",
    "snippet":"love.graphics.getFont()",
    "url":"https://love2d.org/wiki/love.graphics.getFont",
    "description":"Gets the current Font object."
  },
  "love.filedropped":{
    "type":"callback",
    "snippet":"function love.filedropped(${1:file})\n\t${0:-- body...}\nend",
    "url":"https://love2d.org/wiki/love.filedropped",
    "description":"Callback function triggered when a file is dragged and dropped onto the window."
  },
  "love.physics.newEdgeShape":{
    "type":"function",
    "snippet":"love.physics.newEdgeShape(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2})",
    "url":"https://love2d.org/wiki/love.physics.newEdgeShape",
    "description":"Creates a edge shape."
  },
  "love.graphics.ellipse":{
    "type":"function",
    "snippet":"love.graphics.ellipse(${1:mode}, ${2:x}, ${3:y}, ${4:radiusx}, ${5:radiusy})",
    "url":"https://love2d.org/wiki/love.graphics.ellipse",
    "description":"Draws an ellipse."
  },
  "love.physics.newPrismaticJoint":{
    "type":"function",
    "snippet":"love.physics.newPrismaticJoint(${1:body1}, ${2:body2}, ${3:x}, ${4:y}, ${5:ax}, ${6:ay}, ${7:collideConnected})",
    "url":"https://love2d.org/wiki/love.physics.newPrismaticJoint",
    "description":"Create a prismatic joints between two bodies.\n\nA prismatic joint constrains two bodies to move relatively to each other on a specified axis. It does not allow for relative rotation. Its definition and operation are similar to a revolute joint, but with translation and force substituted for angle and torque."
  },
  "love.graphics.getDefaultFilter":{
    "type":"function",
    "snippet":"love.graphics.getDefaultFilter()",
    "url":"https://love2d.org/wiki/love.graphics.getDefaultFilter",
    "description":"Returns the default scaling filters used with Images, Canvases, and Fonts."
  },
  "love.math.getRandomState":{
    "type":"function",
    "snippet":"love.math.getRandomState()",
    "url":"https://love2d.org/wiki/love.math.getRandomState",
    "description":"Gets the current state of the random number generator. This returns an opaque implementation-dependent string which is only useful for later use with RandomGenerator:setState.\n\nThis is different from RandomGenerator:getSeed in that getState gets the RandomGenerator's current state, whereas getSeed gets the previously set seed number.\n\nThe value of the state string does not depend on the current operating system."
  },
  "love.run":{
    "type":"callback",
    "snippet":"function love.run()\n\t${0:-- body...}\nend",
    "url":"https://love2d.org/wiki/love.run",
    "description":"The main function, containing the main loop. A sensible default is used when left out."
  },
  "love.graphics.newVideo":{
    "type":"function",
    "snippet":"love.graphics.newVideo(${1:filename}, ${2:loadaudio})",
    "url":"https://love2d.org/wiki/love.graphics.newVideo",
    "description":"Creates a new drawable Video. Currently only Ogg Theora video files are supported."
  },
  "love.graphics.newScreenshot":{
    "type":"function",
    "snippet":"love.graphics.newScreenshot()",
    "url":"https://love2d.org/wiki/love.graphics.newScreenshot",
    "description":"Creates a screenshot and returns the image data."
  },
  "love.graphics.newMesh":{
    "type":"function",
    "snippet":"love.graphics.newMesh(${1:vertices}, ${2:texture}, ${3:mode})",
    "url":"https://love2d.org/wiki/love.graphics.newMesh",
    "description":"Creates a new Mesh."
  },
  "love.audio.getSourceCount":{
    "type":"function",
    "snippet":"love.audio.getSourceCount()",
    "url":"https://love2d.org/wiki/love.audio.getSourceCount",
    "description":"Returns the number of sources which are currently playing or paused."
  },
  "love.graphics.origin":{
    "type":"function",
    "snippet":"love.graphics.origin()",
    "url":"https://love2d.org/wiki/love.graphics.origin",
    "description":"Resets the current coordinate transformation.\n\nThis function is always used to reverse any previous calls to love.graphics.rotate, love.graphics.scale, love.graphics.shear or love.graphics.translate. It returns the current transformation state to its defaults."
  },
  "love.thread":{
    "type":"module",
    "url":"https://love2d.org/wiki/love.thread",
    "description":"Allows you to work with threads.\n\nThreads are separate Lua environments, running in parallel to the main code. As their code runs separately, they can be used to compute complex operations without adversely affecting the frame rate of the main thread. However, as they are separate environments, they cannot access the variables and functions of the main thread, and communication between threads is limited.\n\nAll LOVE objects (userdata) are shared among threads so you'll only have to send their references across threads. You may run into concurrency issues if you manipulate an object on multiple threads at the same time.\n\nWhen a Thread is started, it only loads the love.thread module. Every other module has to be loaded with require."
  },
  "love.timer":{
    "type":"module",
    "url":"https://love2d.org/wiki/love.timer",
    "description":"Provides an interface to the user's clock."
  },
  "love.audio.getVelocity":{
    "type":"function",
    "snippet":"love.audio.getVelocity()",
    "url":"https://love2d.org/wiki/love.audio.getVelocity",
    "description":"Returns the velocity of the listener."
  },
  "love.graphics.getColor":{
    "type":"function",
    "snippet":"love.graphics.getColor()",
    "url":"https://love2d.org/wiki/love.graphics.getColor",
    "description":"Gets the current color."
  },
  "love.update":{
    "type":"callback",
    "snippet":"function love.update(${1:dt})\n\t${0:-- body...}\nend",
    "url":"https://love2d.org/wiki/love.update",
    "description":"Callback function triggered when a key is pressed."
  },
  "love.graphics.discard":{
    "type":"function",
    "snippet":"love.graphics.discard(${1:discardcolor}, ${2:discardstencil})",
    "url":"https://love2d.org/wiki/love.graphics.discard",
    "description":"Discards (trashes) the contents of the screen or active Canvas. This is a performance optimization function with niche use cases.\n\nIf the active Canvas has just been changed and the \"replace\" BlendMode is about to be used to draw something which covers the entire screen, calling love.graphics.discard rather than calling love.graphics.clear or doing nothing may improve performance on mobile devices.\n\nOn some desktop systems this function may do nothing."
  },
  "love.graphics.present":{
    "type":"function",
    "snippet":"love.graphics.present()",
    "url":"https://love2d.org/wiki/love.graphics.present",
    "description":"Displays the results of drawing operations on the screen.\n\nThis function is used when writing your own love.run function. It presents all the results of your drawing operations on the screen. See the example in love.run for a typical use of this function."
  },
  "love.math.setRandomState":{
    "type":"function",
    "snippet":"love.math.setRandomState(${1:state})",
    "url":"https://love2d.org/wiki/love.math.setRandomState",
    "description":"Gets the current state of the random number generator. This returns an opaque implementation-dependent string which is only useful for later use with RandomGenerator:setState.\n\nThis is different from RandomGenerator:getSeed in that getState gets the RandomGenerator's current state, whereas getSeed gets the previously set seed number.\n\nThe value of the state string does not depend on the current operating system."
  },
  "love.mouse.setRelativeMode":{
    "type":"function",
    "snippet":"love.mouse.setRelativeMode(${1:enable})",
    "url":"https://love2d.org/wiki/love.mouse.setRelativeMode",
    "description":"Sets whether relative mode is enabled for the mouse.\n\nWhen relative mode is enabled, the cursor is hidden and doesn't move when the mouse does, but relative mouse motion events are still generated via love.mousemoved. This lets the mouse move in any direction indefinitely without the cursor getting stuck at the edges of the screen.\n\nThe reported position of the mouse is not updated while relative mode is enabled, even when relative mouse motion events are generated."
  },
  "love.joystickadded":{
    "type":"callback",
    "snippet":"function love.joystickadded(${1:joystick})\n\t${0:-- body...}\nend",
    "url":"https://love2d.org/wiki/love.joystickadded",
    "description":"Called when a Joystick is connected.\n\nThis callback is also triggered after love.load for every Joystick which was already connected when the game started up."
  },
  "love.graphics.setColorMask":{
    "type":"function",
    "snippet":"love.graphics.setColorMask()",
    "url":"https://love2d.org/wiki/love.graphics.setColorMask",
    "description":"Sets the color mask. Enables or disables specific color components when rendering and clearing the screen. For example, if red is set to false, no further changes will be made to the red component of any pixels.\n\nEnables all color components when called without arguments."
  },
  "love.filesystem.getDirectoryItems":{
    "type":"function",
    "snippet":"love.filesystem.getDirectoryItems(${1:dir})",
    "url":"https://love2d.org/wiki/love.filesystem.getDirectoryItems",
    "description":"Returns a table with the names of files and subdirectories in the specified path. The table is not sorted in any way; the order is undefined.\n\nIf the path passed to the function exists in the game and the save directory, it will list the files and directories from both places."
  },
  "love.filesystem.setSymlinksEnabled":{
    "type":"function",
    "snippet":"love.filesystem.setSymlinksEnabled(${1:enable})",
    "url":"https://love2d.org/wiki/love.filesystem.setSymlinksEnabled",
    "description":"Sets whether love.filesystem follows symbolic links. It is disabled by default."
  },
  "love.window.maximize":{
    "type":"function",
    "snippet":"love.window.maximize()",
    "url":"https://love2d.org/wiki/love.window.maximize",
    "description":"Makes the window as large as possible.\n\nThis function has no effect if the window isn't resizable, since it essentially programmatically presses the window's \"maximize\" button."
  },
  "love.graphics.clear":{
    "type":"function",
    "snippet":"love.graphics.clear()",
    "url":"https://love2d.org/wiki/love.graphics.clear",
    "description":"Clears the screen to the background color in LÃ–VE 0.9.2 and earlier, or to the specified color in 0.10.0 and newer.\n\nThis function is called automatically before love.draw in the default love.run function. See the example in love.run for a typical use of this function.\n\nNote that the scissor area bounds the cleared region."
  },
  "love.event.push":{
    "type":"function",
    "snippet":"love.event.push(${1:e}, ${2:a}, ${3:b}, ${4:c}, ${5:d})",
    "url":"https://love2d.org/wiki/love.event.push",
    "description":"Adds an event to the event queue."
  },
  "love.graphics.stencil":{
    "type":"function",
    "snippet":"love.graphics.stencil(${1:stencilfunction}, ${2:keepbuffer})",
    "url":"https://love2d.org/wiki/love.graphics.stencil",
    "description":"Draws geometry to the stencil buffer.\n\nThe passed function draws to the (invisible) stencil buffer instead of the regular screen. The stencil buffer acts like a mask or stencil â€“ the geometry of everything drawn to the stencil buffer determines whether pixels in the buffer are 'enabled' or not. When the Stencil Test is enabled after love.graphics.stencil is used, everything drawn after that point will clipped / stencilled out based on whether it intersects what has been drawn to the stencil buffer.\n\nEach Canvas has its own stencil buffer."
  },
  "love.filesystem.getSourceBaseDirectory":{
    "type":"function",
    "snippet":"love.filesystem.getSourceBaseDirectory()",
    "url":"https://love2d.org/wiki/love.filesystem.getSourceBaseDirectory",
    "description":"Returns the full path to the directory containing the .love file. If the game is fused to the LÃ–VE executable, then the directory containing the executable is returned.\n\nIf love.filesystem.isFused is true, the path returned by this function can be passed to love.filesystem.mount, which will make the directory containing the main game (e.g. C:\\Program Files\\coolgame\\) readable by love.filesystem."
  },
  "love.math":{
    "type":"module",
    "url":"https://love2d.org/wiki/love.math",
    "description":"Provides system-independent mathematical functions."
  },
  "love.physics.getMeter":{
    "type":"function",
    "snippet":"love.physics.getMeter()",
    "url":"https://love2d.org/wiki/love.physics.getMeter",
    "description":"Get the scale of the world.\n\nThe world scale is the number of pixels per meter. Try to keep your shape sizes less than 10 times this scale.\n\nThis is important because the physics in Box2D is tuned to work well for objects of size 0.1m up to 10m. All physics coordinates are divided by this number for the physics calculations."
  },
  "love.audio.setDopplerScale":{
    "type":"function",
    "snippet":"love.audio.setDopplerScale(${1:scale})",
    "url":"https://love2d.org/wiki/love.audio.setDopplerScale",
    "description":"Sets a global scale factor for velocity-based doppler effects. The default scale value is 1."
  },
  "love.joystick.getJoysticks":{
    "type":"function",
    "snippet":"love.joystick.getJoysticks()",
    "url":"https://love2d.org/wiki/love.joystick.getJoysticks",
    "description":"Gets a list of connected Joysticks."
  },
  "love.graphics.isWireframe":{
    "type":"function",
    "snippet":"love.graphics.isWireframe()",
    "url":"https://love2d.org/wiki/love.graphics.isWireframe",
    "description":"Gets whether wireframe mode is used when drawing."
  },
  "love.graphics.getSupported":{
    "type":"function",
    "snippet":"love.graphics.getSupported()",
    "url":"https://love2d.org/wiki/love.graphics.getSupported",
    "description":"Gets the optional graphics features and whether they're supported on the system."
  },
  "love.window.requestAttention":{
    "type":"function",
    "snippet":"love.window.requestAttention(${1:continuous})",
    "url":"https://love2d.org/wiki/love.window.requestAttention",
    "description":"Causes the window to request the attention of the user if it is not in the foreground.\n\nIn Windows the taskbar icon will flash, and in OS X the dock icon will bounce."
  },
  "love.mouse.getX":{
    "type":"function",
    "snippet":"love.mouse.getX()",
    "url":"https://love2d.org/wiki/love.mouse.getX",
    "description":"Returns the current x position of the mouse."
  },
  "love.physics.newRectangleShape":{
    "type":"function",
    "snippet":"love.physics.newRectangleShape(${1:width}, ${2:height})",
    "url":"https://love2d.org/wiki/love.physics.newRectangleShape",
    "description":"Shorthand for creating rectangluar PolygonShapes.\n\nBy default, the local origin is located at the center of the rectangle as opposed to the top left for graphics."
  },
  "love.mouse.setY":{
    "type":"function",
    "snippet":"love.mouse.setY(${1:y})",
    "url":"https://love2d.org/wiki/love.mouse.setY",
    "description":"Sets the current Y position of the mouse."
  },
  "love.graphics.translate":{
    "type":"function",
    "snippet":"love.graphics.translate(${1:dx}, ${2:dy})",
    "url":"https://love2d.org/wiki/love.graphics.translate",
    "description":"Translates the coordinate system in two dimensions.\n\nWhen this function is called with two numbers, dx, and dy, all the following drawing operations take effect as if their x and y coordinates were x+dx and y+dy.\n\nScale and translate are not commutative operations, therefore, calling them in different orders will change the outcome.\n\nThis change lasts until love.graphics.clear is called (which is called automatically before love.draw in the default love.run function), or a love.graphics.pop reverts to a previous coordinate system state.\n\nTranslating using whole numbers will prevent tearing/blurring of images and fonts draw after translating."
  },
  "love.keyboard":{
    "type":"module",
    "url":"https://love2d.org/wiki/love.keyboard",
    "description":"Provides an interface to the user's keyboard."
  },
  "love.math.random":{
    "type":"function",
    "snippet":"love.math.random()",
    "url":"https://love2d.org/wiki/love.math.random",
    "description":"Generates a pseudo-random number in a platform independent manner."
  },
  "love.image.isCompressed":{
    "type":"function",
    "snippet":"love.image.isCompressed(${1:filename})",
    "url":"https://love2d.org/wiki/love.image.isCompressed",
    "description":"Determines whether a file can be loaded as CompressedData."
  },
  "love.thread.newChannel":{
    "type":"function",
    "snippet":"love.thread.newChannel()",
    "url":"https://love2d.org/wiki/love.thread.newChannel",
    "description":"Create a new unnamed thread channel.\n\nOne use for them is to pass new unnamed channels to other threads via Channel:push"
  },
  "love.window.fromPixels":{
    "type":"function",
    "snippet":"love.window.fromPixels(${1:pixelvalue})",
    "url":"https://love2d.org/wiki/love.window.fromPixels",
    "description":"Converts a number from pixels to density-independent units.\n\nThe pixel density inside the window might be greater (or smaller) than the \"size\" of the window. For example on a retina screen in Mac OS X with the highdpi window flag enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. love.window.fromPixels(1600) would return 800 in that case.\n\nThis function converts coordinates from pixels to the size users are expecting them to display at onscreen. love.window.toPixels does the opposite. The highdpi window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled.\n\nMost LÃ–VE functions return values and expect arguments in terms of pixels rather than density-independent units."
  },
  "love.audio.pause":{
    "type":"function",
    "snippet":"love.audio.pause()",
    "url":"https://love2d.org/wiki/love.audio.pause",
    "description":"Pauses all audio"
  },
  "love.graphics.getLineStyle":{
    "type":"function",
    "snippet":"love.graphics.getLineStyle()",
    "url":"https://love2d.org/wiki/love.graphics.getLineStyle",
    "description":"Gets the line style."
  },
  "love.graphics.getScissor":{
    "type":"function",
    "snippet":"love.graphics.getScissor()",
    "url":"https://love2d.org/wiki/love.graphics.getScissor",
    "description":"Gets the current scissor box."
  },
  "love.audio.getPosition":{
    "type":"function",
    "snippet":"love.audio.getPosition()",
    "url":"https://love2d.org/wiki/love.audio.getPosition",
    "description":"Returns the position of the listener."
  },
  "love.math.decompress":{
    "type":"function",
    "snippet":"love.math.decompress(${1:compressedData})",
    "url":"https://love2d.org/wiki/love.math.decompress",
    "description":"Decompresses a CompressedData or previously compressed string or Data object."
  },
  "love.keyboard.hasKeyRepeat":{
    "type":"function",
    "snippet":"love.keyboard.hasKeyRepeat()",
    "url":"https://love2d.org/wiki/love.keyboard.hasKeyRepeat",
    "description":"Gets whether key repeat is enabled."
  },
  "love.filesystem.remove":{
    "type":"function",
    "snippet":"love.filesystem.remove(${1:name})",
    "url":"https://love2d.org/wiki/love.filesystem.remove",
    "description":"Removes a file or directory."
  },
  "love.system.getPowerInfo":{
    "type":"function",
    "snippet":"love.system.getPowerInfo()",
    "url":"https://love2d.org/wiki/love.system.getPowerInfo",
    "description":"Gets information about the system's power supply."
  },
  "love.touch.getPosition":{
    "type":"function",
    "snippet":"love.touch.getPosition(${1:id})",
    "url":"https://love2d.org/wiki/love.touch.getPosition",
    "description":"Gets the current position of the specified touch-press, in pixels."
  },
  "love.system.vibrate":{
    "type":"function",
    "snippet":"love.system.vibrate(${1:seconds})",
    "url":"https://love2d.org/wiki/love.system.vibrate",
    "description":"Causes the device to vibrate, if possible. Currently this will only work on Android and iOS devices that have a built-in vibration motor."
  },
  "love.window.hasMouseFocus":{
    "type":"function",
    "snippet":"love.window.hasMouseFocus()",
    "url":"https://love2d.org/wiki/love.window.hasMouseFocus",
    "description":"Checks if the game window has mouse focus."
  },
  "love.mouse.isDown":{
    "type":"function",
    "snippet":"love.mouse.isDown(${1:button})",
    "url":"https://love2d.org/wiki/love.mouse.isDown",
    "description":"Checks whether a certain mouse button is down. This function does not detect mousewheel scrolling; you must use the love.mousepressed callback for that."
  },
  "love.physics.newWheelJoint":{
    "type":"function",
    "snippet":"love.physics.newWheelJoint(${1:body1}, ${2:body2}, ${3:x}, ${4:y}, ${5:ax}, ${6:ay}, ${7:collideConnected})",
    "url":"https://love2d.org/wiki/love.physics.newWheelJoint",
    "description":"Creates a wheel joint."
  },
  "love.graphics.getLineJoin":{
    "type":"function",
    "snippet":"love.graphics.getLineJoin()",
    "url":"https://love2d.org/wiki/love.graphics.getLineJoin",
    "description":"Gets the line join style."
  },
  "love.filesystem.setIdentity":{
    "type":"function",
    "snippet":"love.filesystem.setIdentity(${1:name}, ${2:searchorder})",
    "url":"https://love2d.org/wiki/love.filesystem.setIdentity",
    "description":"Sets the write directory for your game. Note that you can only set the name of the folder to store your files in, not the location."
  },
  "love.filesystem.isSymlink":{
    "type":"function",
    "snippet":"love.filesystem.isSymlink(${1:path})",
    "url":"https://love2d.org/wiki/love.filesystem.isSymlink",
    "description":"Gets whether a filepath is actually a symbolic link.\n\nIf symbolic links are not enabled (via love.filesystem.setSymlinksEnabled), this function will always return false."
  },
  "love.math.newRandomGenerator":{
    "type":"function",
    "snippet":"love.math.newRandomGenerator()",
    "url":"https://love2d.org/wiki/love.math.newRandomGenerator",
    "description":"Creates a new RandomGenerator object which is completely independent of other RandomGenerator objects and random functions."
  },
  "love.event.clear":{
    "type":"function",
    "snippet":"love.event.clear()",
    "url":"https://love2d.org/wiki/love.event.clear",
    "description":"Clears the event queue."
  },
  "love.audio.stop":{
    "type":"function",
    "snippet":"love.audio.stop()",
    "url":"https://love2d.org/wiki/love.audio.stop",
    "description":"Stops all playing audio."
  },
  "love.physics.newFixture":{
    "type":"function",
    "snippet":"love.physics.newFixture(${1:body}, ${2:shape}, ${3:density})",
    "url":"https://love2d.org/wiki/love.physics.newFixture",
    "description":"Creates and attaches a Fixture to a body."
  },
  "love.graphics.setBackgroundColor":{
    "type":"function",
    "snippet":"love.graphics.setBackgroundColor(${1:r}, ${2:g}, ${3:b}, ${4:a})",
    "url":"https://love2d.org/wiki/love.graphics.setBackgroundColor",
    "description":"Sets the background color."
  },
  "love.visible":{
    "type":"callback",
    "snippet":"function love.visible(${1:v})\n\t${0:-- body...}\nend",
    "url":"https://love2d.org/wiki/love.visible",
    "description":"Callback function triggered when window is minimized/hidden or unminimized by the user."
  },
  "love.video":{
    "type":"module",
    "url":"https://love2d.org/wiki/love.video",
    "description":"This module is responsible for decoding, controlling, and streaming video files.\n\nIt can't draw the videos, see love.graphics.newVideo and Video objects for that."
  },
  "love.touchreleased":{
    "type":"callback",
    "snippet":"function love.touchreleased(${1:id}, ${2:x}, ${3:y}, ${4:pressure})\n\t${0:-- body...}\nend",
    "url":"https://love2d.org/wiki/love.touchreleased",
    "description":"Callback function triggered when the touch screen stops being touched."
  },
  "love.graphics.newQuad":{
    "type":"function",
    "snippet":"love.graphics.newQuad(${1:x}, ${2:y}, ${3:width}, ${4:height}, ${5:sw}, ${6:sh})",
    "url":"https://love2d.org/wiki/love.graphics.newQuad",
    "description":"Creates a new Quad.\n\nThe purpose of a Quad is to describe the result of the following transformation on any drawable object. The object is first scaled to dimensions sw * sh. The Quad then describes the rectangular area of dimensions width * height whose upper left corner is at position (x, y) inside the scaled object."
  },
  "love.physics.getDistance":{
    "type":"function",
    "snippet":"love.physics.getDistance(${1:fixture1}, ${2:fixture2})",
    "url":"https://love2d.org/wiki/love.physics.getDistance",
    "description":"Returns the two closest points between two fixtures and their distance."
  },
  "love.touchpressed":{
    "type":"callback",
    "snippet":"function love.touchpressed(${1:id}, ${2:x}, ${3:y}, ${4:pressure})\n\t${0:-- body...}\nend",
    "url":"https://love2d.org/wiki/love.touchpressed",
    "description":"Callback function triggered when the touch screen is touched."
  },
  "love.filesystem.getRequirePath":{
    "type":"function",
    "snippet":"love.filesystem.getRequirePath()",
    "url":"https://love2d.org/wiki/love.filesystem.getRequirePath",
    "description":"Gets the filesystem paths that will be searched when require is called.\n\nThe paths string returned by this function is a sequence of path templates separated by semicolons. The argument passed to require will be inserted in place of any question mark (\"?\") character in each template (after the dot characters in the argument passed to require are replaced by directory separators.)\n\nThe paths are relative to the game's source and save directories, as well as any paths mounted with love.filesystem.mount."
  },
  "love.graphics.setColor":{
    "type":"function",
    "snippet":"love.graphics.setColor(${1:red}, ${2:green}, ${3:blue}, ${4:alpha})",
    "url":"https://love2d.org/wiki/love.graphics.setColor",
    "description":"Sets the color used for drawing."
  },
  "love.sound.newSoundData":{
    "type":"function",
    "snippet":"love.sound.newSoundData(${1:filename})",
    "url":"https://love2d.org/wiki/love.sound.newSoundData",
    "description":"Creates new SoundData from a file. It's also possible to create SoundData with a custom sample rate, channel and bit depth.\n\nThe sound data will be decoded to the memory in a raw format. It is recommended to create only short sounds like effects, as a 3 minute song uses 30 MB of memory this way."
  },
  "love.textinput":{
    "type":"callback",
    "snippet":"function love.textinput(${1:text})\n\t${0:-- body...}\nend",
    "url":"https://love2d.org/wiki/love.textinput",
    "description":"Called when text has been entered by the user. For example if shift-2 is pressed on an American keyboard layout, the text \"@\" will be generated."
  },
  "love.window.toPixels":{
    "type":"function",
    "snippet":"love.window.toPixels(${1:value})",
    "url":"https://love2d.org/wiki/love.window.toPixels",
    "description":"Converts a number from density-independent units to pixels.\n\nThe pixel density inside the window might be greater (or smaller) than the \"size\" of the window. For example on a retina screen in Mac OS X with the highdpi window flag enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. love.window.toPixels(800) would return 1600 in that case.\n\nThis is used to convert coordinates from the size users are expecting them to display at onscreen to pixels. love.window.fromPixels does the opposite. The highdpi window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled.\n\nMost LÃ–VE functions return values and expect arguments in terms of pixels rather than density-independent units."
  },
  "love.physics.newGearJoint":{
    "type":"function",
    "snippet":"love.physics.newGearJoint(${1:joint1}, ${2:joint2}, ${3:ratio}, ${4:collideConnected})",
    "url":"https://love2d.org/wiki/love.physics.newGearJoint",
    "description":"Create a gear joint connecting two joints.\n\nThe gear joint connects two joints that must be either prismatic or revolute joints. Using this joint requires that the joints it uses connect their respective bodies to the ground and have the ground as the first body. When destroying the bodies and joints you must make sure you destroy the gear joint before the other joints.\n\nThe gear joint has a ratio the determines how the angular or distance values of the connected joints relate to each other. The formula coordinate1 + ratio * coordinate2 always has a constant value that is set when the gear joint is created."
  },
  "love.mousereleased":{
    "type":"callback",
    "snippet":"function love.mousereleased(${1:x}, ${2:y}, ${3:button})\n\t${0:-- body...}\nend",
    "url":"https://love2d.org/wiki/love.mousereleased",
    "description":"Callback function triggered when a mouse button is released."
  },
  "love.window.isVisible":{
    "type":"function",
    "snippet":"love.window.isVisible()",
    "url":"https://love2d.org/wiki/love.window.isVisible",
    "description":"Checks if the game window is visible.\n\nThe window is considered visible if it's not minimized and the program isn't hidden."
  },
  "love.mousepressed":{
    "type":"callback",
    "snippet":"function love.mousepressed(${1:x}, ${2:y}, ${3:button})\n\t${0:-- body...}\nend",
    "url":"https://love2d.org/wiki/love.mousepressed",
    "description":"Callback function triggered when a mouse button is pressed."
  },
  "love.audio.setVelocity":{
    "type":"function",
    "snippet":"love.audio.setVelocity(${1:x}, ${2:y}, ${3:z})",
    "url":"https://love2d.org/wiki/love.audio.setVelocity",
    "description":"Sets the velocity of the listener."
  },
  "love.timer.getAverageDelta":{
    "type":"function",
    "snippet":"love.timer.getAverageDelta()",
    "url":"https://love2d.org/wiki/love.timer.getAverageDelta",
    "description":"Returns the average delta time (seconds per frame) over the last second."
  },
  "love.mousemoved":{
    "type":"callback",
    "snippet":"function love.mousemoved(${1:x}, ${2:y}, ${3:dx}, ${4:dy})\n\t${0:-- body...}\nend",
    "url":"https://love2d.org/wiki/love.mousemoved",
    "description":"Callback function triggered when the mouse is moved."
  },
  "love.filesystem.setSource":{
    "type":"function",
    "snippet":"love.filesystem.setSource(${1:path})",
    "url":"https://love2d.org/wiki/love.filesystem.setSource",
    "description":"Sets the source of the game, where the code is present. This function can only be called once, and is normally automatically done by LÃ–VE."
  },
  "love.keypressed":{
    "type":"callback",
    "snippet":"function love.keypressed(${1:key}, ${2:isrepeat})\n\t${0:-- body...}\nend",
    "url":"https://love2d.org/wiki/love.keypressed",
    "description":"Callback function triggered when a key is pressed.\n\nKey repeat needs to be enabled with love.keyboard.setKeyRepeat for repeat keypress events to be received."
  },
  "love.joystick.setGamepadMapping":{
    "type":"function",
    "snippet":"love.joystick.setGamepadMapping(${1:guid}, ${2:button}, ${3:inputtype}, ${4:inputindex}, ${5:hatdirection})",
    "url":"https://love2d.org/wiki/love.joystick.setGamepadMapping",
    "description":"Binds a virtual gamepad input to a button, axis or hat for all Joysticks of a certain type. For example, if this function is used with a GUID returned by a Dualshock 3 controller in OS X, the binding will affect Joystick:getGamepadAxis and Joystick:isGamepadDown for all Dualshock 3 controllers used with the game when run in OS X.\n\nLÃ–VE includes built-in gamepad bindings for many common controllers. This function lets you change the bindings or add new ones for types of Joysticks which aren't recognized as gamepads by default.\n\nThe virtual gamepad buttons and axes are designed around the Xbox 360 controller layout."
  },
  "love.window.getFullscreen":{
    "type":"function",
    "snippet":"love.window.getFullscreen()",
    "url":"https://love2d.org/wiki/love.window.getFullscreen",
    "description":"Gets whether the window is fullscreen."
  },
  "love.touch":{
    "type":"module",
    "url":"https://love2d.org/wiki/love.touch",
    "description":"Provides an interface to touch-screen presses."
  },
  "love.graphics.getCompressedImageFormats":{
    "type":"function",
    "snippet":"love.graphics.getCompressedImageFormats()",
    "url":"https://love2d.org/wiki/love.graphics.getCompressedImageFormats",
    "description":"Gets the available compressed image formats, and whether each is supported."
  },
  "love.mousefocus":{
    "type":"callback",
    "snippet":"function love.mousefocus(${1:f})\n\t${0:-- body...}\nend",
    "url":"https://love2d.org/wiki/love.mousefocus",
    "description":"Callback function triggered when window receives or loses mouse focus."
  },
  "love.audio.getDopplerScale":{
    "type":"function",
    "snippet":"love.audio.getDopplerScale()",
    "url":"https://love2d.org/wiki/love.audio.getDopplerScale",
    "description":"Gets the current global scale factor for velocity-based doppler effects."
  },
  "love.lowmemory":{
    "type":"callback",
    "snippet":"function love.lowmemory()\n\t${0:-- body...}\nend",
    "url":"https://love2d.org/wiki/love.lowmemory",
    "description":"Callback function triggered when the system is running out of memory on mobile devices.\n\n Mobile operating systems may forcefully kill the game if it uses too much memory, so any non-critical resource should be removed if possible (by setting all variables referencing the resources to nil, and calling collectgarbage()), when this event is triggered. Sounds and images in particular tend to use the most memory."
  },
  "love.load":{
    "type":"callback",
    "snippet":"function love.load(${1:arg})\n\t${0:-- body...}\nend",
    "url":"https://love2d.org/wiki/love.load",
    "description":"This function is called exactly once at the beginning of the game."
  },
  "love.timer.getDelta":{
    "type":"function",
    "snippet":"love.timer.getDelta()",
    "url":"https://love2d.org/wiki/love.timer.getDelta",
    "description":"Returns the time between the last two frames."
  },
  "love.joystickremoved":{
    "type":"callback",
    "snippet":"function love.joystickremoved(${1:joystick})\n\t${0:-- body...}\nend",
    "url":"https://love2d.org/wiki/love.joystickremoved",
    "description":"Called when a Joystick is disconnected."
  },
  "love.graphics.setShader":{
    "type":"function",
    "snippet":"love.graphics.setShader()",
    "url":"https://love2d.org/wiki/love.graphics.setShader",
    "description":"Sets or resets a Shader as the current pixel effect or vertex shaders. All drawing operations until the next love.graphics.setShader will be drawn using the Shader object specified.\n\nDisables the shaders when called without arguments."
  },
  "love.joystickreleased":{
    "type":"callback",
    "snippet":"function love.joystickreleased(${1:joystick}, ${2:button})\n\t${0:-- body...}\nend",
    "url":"https://love2d.org/wiki/love.joystickreleased",
    "description":"Called when a joystick button is released."
  },
  "love.joystickpressed":{
    "type":"callback",
    "snippet":"function love.joystickpressed(${1:joystick}, ${2:button})\n\t${0:-- body...}\nend",
    "url":"https://love2d.org/wiki/love.joystickpressed",
    "description":"Called when a joystick button is pressed."
  },
  "love.window.getMode":{
    "type":"function",
    "snippet":"love.window.getMode()",
    "url":"https://love2d.org/wiki/love.window.getMode",
    "description":"Returns the current display mode."
  },
  "love.gamepadpressed":{
    "type":"callback",
    "snippet":"function love.gamepadpressed(${1:joystick}, ${2:button})\n\t${0:-- body...}\nend",
    "url":"https://love2d.org/wiki/love.gamepadpressed",
    "description":"Called when a Joystick's virtual gamepad button is pressed."
  },
  "love":{
    "type":"module",
    "url":"https://love2d.org/wiki/love",
    "description":"The root LOVE module."
  },
  "love.window.setPosition":{
    "type":"function",
    "snippet":"love.window.setPosition(${1:x}, ${2:y}, ${3:display})",
    "url":"https://love2d.org/wiki/love.window.setPosition",
    "description":"Sets the position of the window on the screen.\n\nThe window position is in the coordinate space of the specified display."
  },
  "love.physics.newWorld":{
    "type":"function",
    "snippet":"love.physics.newWorld(${1:xg}, ${2:yg}, ${3:sleep})",
    "url":"https://love2d.org/wiki/love.physics.newWorld",
    "description":"Creates a new World."
  },
  "love.filesystem.setRequirePath":{
    "type":"function",
    "snippet":"love.filesystem.setRequirePath(${1:paths})",
    "url":"https://love2d.org/wiki/love.filesystem.setRequirePath",
    "description":"Sets the filesystem paths that will be searched when require is called.\n\nThe paths string given to this function is a sequence of path templates separated by semicolons. The argument passed to require will be inserted in place of any question mark (\"?\") character in each template (after the dot characters in the argument passed to require are replaced by directory separators.)\n\nThe paths are relative to the game's source and save directories, as well as any paths mounted with love.filesystem.mount."
  },
  "love.mouse.setCursor":{
    "type":"function",
    "snippet":"love.mouse.setCursor()",
    "url":"https://love2d.org/wiki/love.mouse.setCursor",
    "description":"Sets the current mouse cursor.\n\nResets the current mouse cursor to the default when called without arguments."
  },
  "love.gamepadaxis":{
    "type":"callback",
    "snippet":"function love.gamepadaxis(${1:joystick}, ${2:axis})\n\t${0:-- body...}\nend",
    "url":"https://love2d.org/wiki/love.gamepadaxis",
    "description":"Called when a Joystick's virtual gamepad axis is moved."
  },
  "love.window.setTitle":{
    "type":"function",
    "snippet":"love.window.setTitle(${1:title})",
    "url":"https://love2d.org/wiki/love.window.setTitle",
    "description":"Sets the window title."
  },
  "love.draw":{
    "type":"callback",
    "snippet":"function love.draw()\n\t${0:-- body...}\nend",
    "url":"https://love2d.org/wiki/love.draw",
    "description":"Callback function used to draw on the screen every frame."
  },
  "love.graphics.setLineStyle":{
    "type":"function",
    "snippet":"love.graphics.setLineStyle(${1:style})",
    "url":"https://love2d.org/wiki/love.graphics.setLineStyle",
    "description":"Sets the line style."
  },
  "love.textedited":{
    "type":"callback",
    "snippet":"function love.textedited(${1:text}, ${2:start}, ${3:length})\n\t${0:-- body...}\nend",
    "url":"https://love2d.org/wiki/love.textedited",
    "description":"Called when the candidate text for an IME (Input Method Editor) has changed.\n\nThe candidate text is not the final text that the user will eventually choose. Use love.textinput for that."
  },
  "love.errhand":{
    "type":"callback",
    "snippet":"function love.errhand(${1:msg})\n\t${0:-- body...}\nend",
    "url":"https://love2d.org/wiki/love.errhand",
    "description":"The error handler, used to display error messages."
  },
  "love.window.setMode":{
    "type":"function",
    "snippet":"love.window.setMode(${1:width}, ${2:height}, ${3:flags})",
    "url":"https://love2d.org/wiki/love.window.setMode",
    "description":"Changes the display mode.\n\nIf width or height is 0, the width or height of the desktop will be used.\n\nChanging the display mode may have side effects: for example, canvases will be cleared and values sent to shaders with Shader:send will be erased. Make sure to save the contents of canvases beforehand or re-draw to them afterward if you need to."
  },
  "love.window.setIcon":{
    "type":"function",
    "snippet":"love.window.setIcon(${1:imagedata})",
    "url":"https://love2d.org/wiki/love.window.setIcon",
    "description":"Sets the window icon until the game is quit. Not all operating systems support very large icon images."
  },
  "love.graphics.getFullscreenModes":{
    "type":"function",
    "snippet":"love.graphics.getFullscreenModes()",
    "url":"https://love2d.org/wiki/love.graphics.getFullscreenModes",
    "description":"Gets a list of supported fullscreen modes."
  },
  "love.window.setFullscreen":{
    "type":"function",
    "snippet":"love.window.setFullscreen(${1:fullscreen})",
    "url":"https://love2d.org/wiki/love.window.setFullscreen",
    "description":"Enters or exits fullscreen. The display to use when entering fullscreen is chosen based on which display the window is currently in, if multiple monitors are connected.\n\nIf fullscreen mode is entered and the window size doesn't match one of the monitor's display modes (in normal fullscreen mode) or the window size doesn't match the desktop size (in 'desktop' fullscreen mode), the window will be resized appropriately. The window will revert back to its original size again when fullscreen mode is exited using this function."
  },
  "love.window.setDisplaySleepEnabled":{
    "type":"function",
    "snippet":"love.window.setDisplaySleepEnabled(${1:enable})",
    "url":"https://love2d.org/wiki/love.window.setDisplaySleepEnabled",
    "description":"Sets whether the display is allowed to sleep while the program is running.\n\nDisplay sleep is disabled by default. Some types of input (e.g. joystick button presses) might not prevent the display from sleeping, if display sleep is allowed."
  },
  "love.system.setClipboardText":{
    "type":"function",
    "snippet":"love.system.setClipboardText(${1:text})",
    "url":"https://love2d.org/wiki/love.system.setClipboardText",
    "description":"Puts text in the clipboard."
  },
  "love.keyboard.setKeyRepeat":{
    "type":"function",
    "snippet":"love.keyboard.setKeyRepeat(${1:enable})",
    "url":"https://love2d.org/wiki/love.keyboard.setKeyRepeat",
    "description":"Enables or disables key repeat. It is disabled by default.\n\nThe interval between repeats depends on the user's system settings."
  },
  "love.window.hasFocus":{
    "type":"function",
    "snippet":"love.window.hasFocus()",
    "url":"https://love2d.org/wiki/love.window.hasFocus",
    "description":"Checks if the game window has keyboard focus."
  },
  "love.window.getTitle":{
    "type":"function",
    "snippet":"love.window.getTitle()",
    "url":"https://love2d.org/wiki/love.window.getTitle",
    "description":"Gets the window title."
  },
  "love.window.getPosition":{
    "type":"function",
    "snippet":"love.window.getPosition()",
    "url":"https://love2d.org/wiki/love.window.getPosition",
    "description":"Gets the position of the window on the screen.\n\nThe window position is in the coordinate space of the display it is currently in."
  },
  "love.window.getPixelScale":{
    "type":"function",
    "snippet":"love.window.getPixelScale()",
    "url":"https://love2d.org/wiki/love.window.getPixelScale",
    "description":"Gets the DPI scale factor associated with the window.\n\nThe pixel density inside the window might be greater (or smaller) than the \"size\" of the window. For example on a retina screen in Mac OS X with the highdpi window flag enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. love.window.getPixelScale() would return 2.0 in that case.\n\nThe love.window.fromPixels and love.window.toPixels functions can also be used to convert between units.\n\nThe highdpi window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled."
  },
  "love.graphics.setWireframe":{
    "type":"function",
    "snippet":"love.graphics.setWireframe(${1:enable})",
    "url":"https://love2d.org/wiki/love.graphics.setWireframe",
    "description":"Sets whether wireframe lines will be used when drawing.\n\nWireframe mode should only be used for debugging. The lines drawn with it enabled do not behave like regular love.graphics lines: their widths don't scale with the coordinate transformations or with love.graphics.setLineWidth, and they don't use the smooth LineStyle."
  },
  "love.math.triangulate":{
    "type":"function",
    "snippet":"love.math.triangulate(${1:polygon})",
    "url":"https://love2d.org/wiki/love.math.triangulate",
    "description":"Triangulate a simple polygon."
  },
  "love.graphics.setNewFont":{
    "type":"function",
    "snippet":"love.graphics.setNewFont(${1:size})",
    "url":"https://love2d.org/wiki/love.graphics.setNewFont",
    "description":"Creates and sets a new font."
  },
  "love.math.setRandomSeed":{
    "type":"function",
    "snippet":"love.math.setRandomSeed(${1:seed})",
    "url":"https://love2d.org/wiki/love.math.setRandomSeed",
    "description":"Sets the seed of the random number generator using the specified integer number."
  },
  "love.window.getFullscreenModes":{
    "type":"function",
    "snippet":"love.window.getFullscreenModes(${1:display})",
    "url":"https://love2d.org/wiki/love.window.getFullscreenModes",
    "description":"Gets a list of supported fullscreen modes."
  },
  "love.graphics.newFont":{
    "type":"function",
    "snippet":"love.graphics.newFont(${1:filename}, ${2:size})",
    "url":"https://love2d.org/wiki/love.graphics.newFont",
    "description":"Creates a new Font."
  },
  "love.window.getDisplayName":{
    "type":"function",
    "snippet":"love.window.getDisplayName(${1:displayindex})",
    "url":"https://love2d.org/wiki/love.window.getDisplayName",
    "description":"Gets the name of a display."
  },
  "love.joystickhat":{
    "type":"callback",
    "snippet":"function love.joystickhat(${1:joystick}, ${2:hat}, ${3:direction})\n\t${0:-- body...}\nend",
    "url":"https://love2d.org/wiki/love.joystickhat",
    "description":"Called when a joystick hat direction changes."
  },
  "love.filesystem.getAppdataDirectory":{
    "type":"function",
    "snippet":"love.filesystem.getAppdataDirectory()",
    "url":"https://love2d.org/wiki/love.filesystem.getAppdataDirectory",
    "description":"Returns the application data directory (could be the same as getUserDirectory)"
  },
  "love.mouse.hasCursor":{
    "type":"function",
    "snippet":"love.mouse.hasCursor()",
    "url":"https://love2d.org/wiki/love.mouse.hasCursor",
    "description":"Gets whether cursor functionality is supported.\n\nIf it isn't supported, calling love.mouse.newCursor and love.mouse.getSystemCursor will cause an error. Mobile devices do not support cursors."
  },
  "love.keyboard.getScancodeFromKey":{
    "type":"function",
    "snippet":"love.keyboard.getScancodeFromKey(${1:key})",
    "url":"https://love2d.org/wiki/love.keyboard.getScancodeFromKey",
    "description":"Gets the hardware scancode corresponding to the given key.\n\nThe location of a key is based on the keyboard's current language layout, whereas scancodes are the layout-independent representations of where the physical keys are.\n\nFor example, the key located where \"q\" is on a U.S. keyboard has the scancode \"q\". When using a U.S. keyboard layout it produces the key \"q\", but when using a French keyboard layout it produces the key \"a\".\n\nScancodes are useful for creating default controls that have the same physical locations on on all systems."
  },
  "love.physics.newPulleyJoint":{
    "type":"function",
    "snippet":"love.physics.newPulleyJoint(${1:body1}, ${2:body2}, ${3:gx1}, ${4:gy1}, ${5:gx2}, ${6:gy2}, ${7:x1}, ${8:y1}, ${9:x2}, ${10:y2}, ${11:ratio}, ${12:collideConnected})",
    "url":"https://love2d.org/wiki/love.physics.newPulleyJoint",
    "description":"Create a pulley joint to join two bodies to each other and the ground.\n\nThe pulley joint simulates a pulley with an optional block and tackle. If the ratio parameter has a value different from one, then the simulated rope extends faster on one side than the other. In a pulley joint the total length of the simulated rope is the constant length1 + ratio * length2, which is set when the pulley joint is created.\n\nPulley joints can behave unpredictably if one side is fully extended. It is recommended that the method setMaxLengths  be used to constrain the maximum lengths each side can attain."
  },
  "love.filesystem.write":{
    "type":"function",
    "snippet":"love.filesystem.write(${1:name}, ${2:data}, ${3:size})",
    "url":"https://love2d.org/wiki/love.filesystem.write",
    "description":"Write data to a file.\n\nIf you are getting the error message \"Could not set write directory\", try setting the save directory. This is done either with love.filesystem.setIdentity or by setting the identity field in love.conf."
  },
  "love.graphics.getDimensions":{
    "type":"function",
    "snippet":"love.graphics.getDimensions()",
    "url":"https://love2d.org/wiki/love.graphics.getDimensions",
    "description":"Gets the width and height of the window."
  },
  "love.filesystem.getSaveDirectory":{
    "type":"function",
    "snippet":"love.filesystem.getSaveDirectory()",
    "url":"https://love2d.org/wiki/love.filesystem.getSaveDirectory",
    "description":"Gets the full path to the designated save directory. This can be useful if you want to use the standard io library (or something else) to read or write in the save directory."
  },
  "love.keyboard.isDown":{
    "type":"function",
    "snippet":"love.keyboard.isDown(${1:key})",
    "url":"https://love2d.org/wiki/love.keyboard.isDown",
    "description":"Checks whether a certain key is down. Not to be confused with love.keypressed or love.keyreleased."
  },
  "love.audio.rewind":{
    "type":"function",
    "snippet":"love.audio.rewind()",
    "url":"https://love2d.org/wiki/love.audio.rewind",
    "description":"Rewinds all playing audio."
  },
  "love.directorydropped":{
    "type":"callback",
    "snippet":"function love.directorydropped(${1:path})\n\t${0:-- body...}\nend",
    "url":"https://love2d.org/wiki/love.directorydropped",
    "description":"Callback function triggered when a directory is dragged and dropped onto the window."
  },
  "love.window.close":{
    "type":"function",
    "snippet":"love.window.close()",
    "url":"https://love2d.org/wiki/love.window.close",
    "description":"Closes the window. It can be reopened with love.window.setMode."
  },
  "love.graphics.setFont":{
    "type":"function",
    "snippet":"love.graphics.setFont(${1:font})",
    "url":"https://love2d.org/wiki/love.graphics.setFont",
    "description":"Set an already-loaded Font as the current font or create and load a new one from the file and size.\n\nIt's recommended that Font objects are created with love.graphics.newFont in the loading stage and then passed to this function in the drawing stage."
  },
  "love.filesystem.exists":{
    "type":"function",
    "snippet":"love.filesystem.exists(${1:filename})",
    "url":"https://love2d.org/wiki/love.filesystem.exists",
    "description":"Check whether a file or directory exists."
  },
  "love.graphics.rotate":{
    "type":"function",
    "snippet":"love.graphics.rotate(${1:angle})",
    "url":"https://love2d.org/wiki/love.graphics.rotate",
    "description":"Rotates the coordinate system in two dimensions.\n\nCalling this function affects all future drawing operations by rotating the coordinate system around the origin by the given amount of radians. This change lasts until love.draw exits."
  },
  "love.filesystem":{
    "type":"module",
    "url":"https://love2d.org/wiki/love.filesystem",
    "description":"Provides an interface to the user's filesystem."
  },
  "love.window":{
    "type":"module",
    "url":"https://love2d.org/wiki/love.window",
    "description":"Provides an interface for modifying and retrieving information about the program's window."
  },
  "love.wheelmoved":{
    "type":"callback",
    "snippet":"function love.wheelmoved(${1:x}, ${2:y})\n\t${0:-- body...}\nend",
    "url":"https://love2d.org/wiki/love.wheelmoved",
    "description":"Callback function triggered when the mouse wheel is moved."
  },
  "love.touch.getTouches":{
    "type":"function",
    "snippet":"love.touch.getTouches()",
    "url":"https://love2d.org/wiki/love.touch.getTouches",
    "description":"Gets a list of all active touch-presses."
  },
  "love.mouse":{
    "type":"module",
    "url":"https://love2d.org/wiki/love.mouse",
    "description":"Provides an interface to the user's mouse."
  },
  "love.thread.getChannel":{
    "type":"function",
    "snippet":"love.thread.getChannel(${1:name})",
    "url":"https://love2d.org/wiki/love.thread.getChannel",
    "description":"Creates or retrieves a named thread channel."
  },
  "love.graphics.getLineWidth":{
    "type":"function",
    "snippet":"love.graphics.getLineWidth()",
    "url":"https://love2d.org/wiki/love.graphics.getLineWidth",
    "description":"Gets the current line width."
  },
  "love.threaderror":{
    "type":"callback",
    "snippet":"function love.threaderror(${1:thread}, ${2:errorstr})\n\t${0:-- body...}\nend",
    "url":"https://love2d.org/wiki/love.threaderror",
    "description":"Callback function triggered when a Thread encounters an error."
  },
  "love.graphics.points":{
    "type":"function",
    "snippet":"love.graphics.points(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:...})",
    "url":"https://love2d.org/wiki/love.graphics.points",
    "description":"Draws one or more points."
  },
  "love.timer.getTime":{
    "type":"function",
    "snippet":"love.timer.getTime()",
    "url":"https://love2d.org/wiki/love.timer.getTime",
    "description":"Returns the value of a timer with an unspecified starting time. This function should only be used to calculate differences between points in time, as the starting time of the timer is unknown."
  },
  "love.audio.setDistanceModel":{
    "type":"function",
    "snippet":"love.audio.setDistanceModel(${1:model})",
    "url":"https://love2d.org/wiki/love.audio.setDistanceModel",
    "description":"Sets the distance attenuation model."
  },
  "love.filesystem.getUserDirectory":{
    "type":"function",
    "snippet":"love.filesystem.getUserDirectory()",
    "url":"https://love2d.org/wiki/love.filesystem.getUserDirectory",
    "description":"Returns the path of the user's directory."
  },
  "love.filesystem.load":{
    "type":"function",
    "snippet":"love.filesystem.load(${1:name})",
    "url":"https://love2d.org/wiki/love.filesystem.load",
    "description":"Load a file (but not run it)."
  },
  "love.timer.getFPS":{
    "type":"function",
    "snippet":"love.timer.getFPS()",
    "url":"https://love2d.org/wiki/love.timer.getFPS",
    "description":"Returns the current frames per second."
  },
  "love.keyreleased":{
    "type":"callback",
    "snippet":"function love.keyreleased(${1:key})\n\t${0:-- body...}\nend",
    "url":"https://love2d.org/wiki/love.keyreleased",
    "description":"Callback function triggered when a key is released."
  },
  "love.mouse.setGrabbed":{
    "type":"function",
    "snippet":"love.mouse.setGrabbed(${1:grab})",
    "url":"https://love2d.org/wiki/love.mouse.setGrabbed",
    "description":"Grabs the mouse and confines it to the window."
  },
  "love.audio.getDistanceModel":{
    "type":"function",
    "snippet":"love.audio.getDistanceModel()",
    "url":"https://love2d.org/wiki/love.audio.getDistanceModel",
    "description":"Returns the distance attenuation model."
  },
  "love.graphics.newText":{
    "type":"function",
    "snippet":"love.graphics.newText(${1:font}, ${2:textstring})",
    "url":"https://love2d.org/wiki/love.graphics.newText",
    "description":"Creates a new Font."
  },
  "love.physics.newWeldJoint":{
    "type":"function",
    "snippet":"love.physics.newWeldJoint(${1:body1}, ${2:body2}, ${3:x}, ${4:y}, ${5:collideConnected})",
    "url":"https://love2d.org/wiki/love.physics.newWeldJoint",
    "description":"Create a friction joint between two bodies. A WeldJoint essentially glues two bodies together."
  },
  "love.filesystem.getLastModified":{
    "type":"function",
    "snippet":"love.filesystem.getLastModified(${1:filename})",
    "url":"https://love2d.org/wiki/love.filesystem.getLastModified",
    "description":"Gets the last modification time of a file."
  },
  "love.math.isConvex":{
    "type":"function",
    "snippet":"love.math.isConvex(${1:vertices})",
    "url":"https://love2d.org/wiki/love.math.isConvex",
    "description":"Checks whether a polygon is convex.\n\nPolygonShapes in love.physics, some forms of Mesh, and polygons drawn with love.graphics.polygon must be simple convex polygons."
  },
  "love.graphics.getPointSize":{
    "type":"function",
    "snippet":"love.graphics.getPointSize()",
    "url":"https://love2d.org/wiki/love.graphics.getPointSize",
    "description":"Gets the point size."
  },
  "love.graphics.rectangle":{
    "type":"function",
    "snippet":"love.graphics.rectangle(${1:mode}, ${2:x}, ${3:y}, ${4:width}, ${5:height})",
    "url":"https://love2d.org/wiki/love.graphics.rectangle",
    "description":"Draws a rectangle."
  },
  "love.system.getProcessorCount":{
    "type":"function",
    "snippet":"love.system.getProcessorCount()",
    "url":"https://love2d.org/wiki/love.system.getProcessorCount",
    "description":"Gets the number of CPU cores in the system.\n\nThe number includes the threads reported if technologies such as Intel's Hyper-threading are enabled. For example, on a 4-core CPU with Hyper-threading, this function will return 8."
  },
  "love.graphics.newCanvas":{
    "type":"function",
    "snippet":"love.graphics.newCanvas(${1:width}, ${2:height}, ${3:texture_type}, ${4:fsaa})",
    "url":"https://love2d.org/wiki/love.graphics.newCanvas",
    "description":"Creates a new Canvas object for offscreen rendering.\n\nAntialiased Canvases have slightly higher system requirements than normal Canvases. Additionally, the supported maximum number of FSAA samples varies depending on the system. Use love.graphics.getSystemLimit to check.\n\nIf the number of FSAA samples specified is greater than the maximum supported by the system, the Canvas will still be created but only using the maximum supported amount (this includes 0.)"
  },
  "love.mouse.getCursor":{
    "type":"function",
    "snippet":"love.mouse.getCursor()",
    "url":"https://love2d.org/wiki/love.mouse.getCursor",
    "description":"Gets the current Cursor."
  },
  "love.sound.newDecoder":{
    "type":"function",
    "snippet":"love.sound.newDecoder(${1:file}, ${2:buffer})",
    "url":"https://love2d.org/wiki/love.sound.newDecoder",
    "description":"Attempts to find a decoder for the encoded sound data in the specified file."
  },
  "love.system.getClipboardText":{
    "type":"function",
    "snippet":"love.system.getClipboardText()",
    "url":"https://love2d.org/wiki/love.system.getClipboardText",
    "description":"Gets text from the clipboard."
  },
  "love.math.noise":{
    "type":"function",
    "snippet":"love.math.noise(${1:x})",
    "url":"https://love2d.org/wiki/love.math.noise",
    "description":"Generates a Simplex noise value in 1-4 dimensions.\n\nSimplex noise is closely related to Perlin noise. It is widely used for procedural content generation."
  },
  "love.system":{
    "type":"module",
    "url":"https://love2d.org/wiki/love.system",
    "description":"Provides access to information about the user's system."
  },
  "love.sound":{
    "type":"module",
    "url":"https://love2d.org/wiki/love.sound",
    "description":"This module is responsible for decoding sound files. It can't play the sounds, see love.audio for that."
  },
  "love.physics.setMeter":{
    "type":"function",
    "snippet":"love.physics.setMeter(${1:scale})",
    "url":"https://love2d.org/wiki/love.physics.setMeter",
    "description":"Sets the pixels to meter scale factor.\n\nAll coordinates in the physics module are divided by this number and converted to meters, and it creates a convenient way to draw the objects directly to the screen without the need for graphics transformations.\n\nIt is recommended to create shapes no larger than 10 times the scale. This is important because Box2D is tuned to work well with shape sizes from 0.1 to 10 meters. The default meter scale is 30.\n\nlove.physics.setMeter does not apply retroactively to created objects. Created objects retain their meter coordinates but the scale factor will affect their pixel coordinates."
  },
  "love.audio.getVolume":{
    "type":"function",
    "snippet":"love.audio.getVolume()",
    "url":"https://love2d.org/wiki/love.audio.getVolume",
    "description":"Returns the master volume."
  },
  "love.event.wait":{
    "type":"function",
    "snippet":"love.event.wait()",
    "url":"https://love2d.org/wiki/love.event.wait",
    "description":"Like love.event.poll but blocks until there is an event in the queue."
  },
  "love.graphics.scale":{
    "type":"function",
    "snippet":"love.graphics.scale(${1:sx}, ${2:sy})",
    "url":"https://love2d.org/wiki/love.graphics.scale",
    "description":"Scales the coordinate system in two dimensions.\n\nBy default the coordinate system in LÃ–VE corresponds to the display pixels in horizontal and vertical directions one-to-one, and the x-axis increases towards the right while the y-axis increases downwards. Scaling the coordinate system changes this relation.\n\nAfter scaling by sx and sy, all coordinates are treated as if they were multiplied by sx and sy. Every result of a drawing operation is also correspondingly scaled, so scaling by (2, 2) for example would mean making everything twice as large in both x- and y-directions. Scaling by a negative value flips the coordinate system in the corresponding direction, which also means everything will be drawn flipped or upside down, or both. Scaling by zero is not a useful operation.\n\nScale and translate are not commutative operations, therefore, calling them in different orders will change the outcome.\n\nScaling lasts until love.draw exits."
  },
  "love.joystick":{
    "type":"module",
    "url":"https://love2d.org/wiki/love.joystick",
    "description":"Provides an interface to the user's joystick."
  },
  "love.filesystem.mount":{
    "type":"function",
    "snippet":"love.filesystem.mount(${1:archive}, ${2:mountpoint})",
    "url":"https://love2d.org/wiki/love.filesystem.mount",
    "description":"Mounts a zip file or folder in the game's save directory for reading."
  },
  "love.math.randomNormal":{
    "type":"function",
    "snippet":"love.math.randomNormal(${1:stddev}, ${2:mean})",
    "url":"https://love2d.org/wiki/love.math.randomNormal",
    "description":"Get a normally distributed pseudo random number."
  },
  "love.graphics.setCanvas":{
    "type":"function",
    "snippet":"love.graphics.setCanvas()",
    "url":"https://love2d.org/wiki/love.graphics.setCanvas",
    "description":"Sets the render target to one or more Canvases. All drawing operations until the next love.graphics.setCanvas call will be redirected to the specified canvases and not shown on the screen.\n\nAll canvas arguments must have the same widths and heights and the same texture type. Normally the same thing will be drawn on each canvas, but that can be changed if a pixel shader is used with the \"effects\" function instead of the regular effect.\n\nNot all computers support Canvases, and not all computers which support Canvases will support multiple render targets. Use love.graphics.isSupported to check.\n\nnWhen called without arguments, the render target is reset to the screen."
  },
  "love.physics.newRopeJoint":{
    "type":"function",
    "snippet":"love.physics.newRopeJoint(${1:body1}, ${2:body2}, ${3:x1}, ${4:y1}, ${5:x2}, ${6:y2}, ${7:maxLength}, ${8:collideConnected})",
    "url":"https://love2d.org/wiki/love.physics.newRopeJoint",
    "description":"Create a joint between two bodies. Its only function is enforcing a max distance between these bodies."
  },
  "love.physics.newRevoluteJoint":{
    "type":"function",
    "snippet":"love.physics.newRevoluteJoint(${1:body1}, ${2:body2}, ${3:x}, ${4:y}, ${5:collideConnected})",
    "url":"https://love2d.org/wiki/love.physics.newRevoluteJoint",
    "description":"Creates a pivot joint between two bodies.\n\nThis joint connects two bodies to a point around which they can pivot."
  },
  "love.graphics.setLineJoin":{
    "type":"function",
    "snippet":"love.graphics.setLineJoin(${1:join})",
    "url":"https://love2d.org/wiki/love.graphics.setLineJoin",
    "description":"Sets the line join style."
  },
  "love.event.quit":{
    "type":"function",
    "snippet":"love.event.quit()",
    "url":"https://love2d.org/wiki/love.event.quit",
    "description":"Adds the quit event to the queue.\n\nThe quit event is a signal for the event handler to close LÃ–VE. It's possible to abort the exit process with the love.quit callback."
  },
  "love.mouse.getSystemCursor":{
    "type":"function",
    "snippet":"love.mouse.getSystemCursor(${1:ctype})",
    "url":"https://love2d.org/wiki/love.mouse.getSystemCursor",
    "description":"Gets a Cursor object representing a system-native hardware cursor.\n\n Hardware cursors are framerate-independent and work the same way as normal operating system cursors. Unlike drawing an image at the mouse's current coordinates, hardware cursors never have visible lag between when the mouse is moved and when the cursor position updates, even at low framerates."
  },
  "love.joystick.saveGamepadMappings":{
    "type":"function",
    "snippet":"love.joystick.saveGamepadMappings(${1:filename})",
    "url":"https://love2d.org/wiki/love.joystick.saveGamepadMappings",
    "description":"Saves the virtual gamepad mappings of all Joysticks that are recognized as gamepads and have either been recently used or their gamepad bindings have been modified."
  },
  "love.audio.newSource":{
    "type":"function",
    "snippet":"love.audio.newSource(${1:filename}, ${2:type})",
    "url":"https://love2d.org/wiki/love.audio.newSource",
    "description":"Creates a new Source from a file or SoundData. Sources created from SoundData are always static."
  },
  "love.graphics.getShader":{
    "type":"function",
    "snippet":"love.graphics.getShader()",
    "url":"https://love2d.org/wiki/love.graphics.getShader",
    "description":"Returns the current Shader. Returns nil if none is set."
  },
  "love.timer.step":{
    "type":"function",
    "snippet":"love.timer.step()",
    "url":"https://love2d.org/wiki/love.timer.step",
    "description":"Measures the time between two frames. Calling this changes the return value of love.timer.getDelta."
  },
  "love.physics.newDistanceJoint":{
    "type":"function",
    "snippet":"love.physics.newDistanceJoint(${1:body1}, ${2:body2}, ${3:x1}, ${4:y1}, ${5:x2}, ${6:y2}, ${7:collideConnected})",
    "url":"https://love2d.org/wiki/love.physics.newDistanceJoint",
    "description":"Create a distance joint between two bodies.\n\nThis joint constrains the distance between two points on two bodies to be constant. These two points are specified in world coordinates and the two bodies are assumed to be in place when this joint is created. The first anchor point is connected to the first body and the second to the second body, and the points define the length of the distance joint."
  },
  "love.physics.newChainShape":{
    "type":"function",
    "snippet":"love.physics.newChainShape(${1:loop}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:...})",
    "url":"https://love2d.org/wiki/love.physics.newChainShape",
    "description":"Creates a new ChainShape."
  },
  "love.mouse.setVisible":{
    "type":"function",
    "snippet":"love.mouse.setVisible(${1:visible})",
    "url":"https://love2d.org/wiki/love.mouse.setVisible",
    "description":"Sets the visibility of the cursor."
  },
  "love.graphics.polygon":{
    "type":"function",
    "snippet":"love.graphics.polygon(${1:mode}, ${2:...})",
    "url":"https://love2d.org/wiki/love.graphics.polygon",
    "description":"Draw a polygon.\n\nFollowing the mode argument, this function can accept multiple numeric arguments or a single table of numeric arguments. In either case the arguments are interpreted as alternating x and y coordinates of the polygon's vertices.\n\nWhen in fill mode, the polygon must be convex and simple or rendering artifacts may occur."
  },
  "love.mouse.setPosition":{
    "type":"function",
    "snippet":"love.mouse.setPosition(${1:x}, ${2:y})",
    "url":"https://love2d.org/wiki/love.mouse.setPosition",
    "description":"Sets the position of the mouse."
  },
  "love.graphics.getBackgroundColor":{
    "type":"function",
    "snippet":"love.graphics.getBackgroundColor()",
    "url":"https://love2d.org/wiki/love.graphics.getBackgroundColor",
    "description":"Gets the current background color."
  },
  "love.graphics.intersectScissor":{
    "type":"function",
    "snippet":"love.graphics.intersectScissor(${1:x}, ${2:y}, ${3:width}, ${4:height})",
    "url":"https://love2d.org/wiki/love.graphics.intersectScissor",
    "description":"Sets the scissor to the rectangle created by the intersection of the specified rectangle with the existing scissor. If no scissor is active yet, it behaves like love.graphics.setScissor.\n\nThe scissor limits the drawing area to a specified rectangle. This affects all graphics calls, including love.graphics.clear.\n\nThe dimensions of the scissor is unaffected by graphical transformations (translate, scale, ...)."
  },
  "love.mouse.getRelativeMode":{
    "type":"function",
    "snippet":"love.mouse.getRelativeMode()",
    "url":"https://love2d.org/wiki/love.mouse.getRelativeMode",
    "description":"Gets whether relative mode is enabled for the mouse.\n\nIf relative mode is enabled, the cursor is hidden and doesn't move when the mouse does, but relative mouse motion events are still generated via love.mousemoved. This lets the mouse move in any direction indefinitely without the cursor getting stuck at the edges of the screen.\n\nThe reported position of the mouse is not updated while relative mode is enabled, even when relative mouse motion events are generated."
  },
  "love.mouse.getPosition":{
    "type":"function",
    "snippet":"love.mouse.getPosition()",
    "url":"https://love2d.org/wiki/love.mouse.getPosition",
    "description":"Returns the current position of the mouse."
  },
  "love.graphics.setInvertedStencil":{
    "type":"function",
    "snippet":"love.graphics.setInvertedStencil()",
    "url":"https://love2d.org/wiki/love.graphics.setInvertedStencil",
    "description":"Defines an inverted stencil for the drawing operations or releases the active one.\n\nIt's the same as love.graphics.setStencil with the mask inverted.\n\nCalling the function without arguments releases the active stencil."
  },
  "love.joystick.getJoystickCount":{
    "type":"function",
    "snippet":"love.joystick.getJoystickCount()",
    "url":"https://love2d.org/wiki/love.joystick.getJoystickCount",
    "description":"Gets the number of connected joysticks."
  },
  "love.filesystem.createDirectory":{
    "type":"function",
    "snippet":"love.filesystem.createDirectory(${1:name})",
    "url":"https://love2d.org/wiki/love.filesystem.createDirectory",
    "description":"Creates a directory."
  },
  "love.filesystem.getRealDirectory":{
    "type":"function",
    "snippet":"love.filesystem.getRealDirectory(${1:filepath})",
    "url":"https://love2d.org/wiki/love.filesystem.getRealDirectory",
    "description":"Gets the platform-specific absolute path of the directory containing a filepath.\n\nThis can be used to determine whether a file is inside the save directory or the game's source .love."
  },
  "love.system.getOS":{
    "type":"function",
    "snippet":"love.system.getOS()",
    "url":"https://love2d.org/wiki/love.system.getOS",
    "description":"Gets the current operating system. In general, LÃ–VE abstracts away the need to know the current operating system, but there are a few cases where it can be useful (especially in combination with os.execute.)"
  },
  "love.filesystem.unmount":{
    "type":"function",
    "snippet":"love.filesystem.unmount(${1:archive})",
    "url":"https://love2d.org/wiki/love.filesystem.unmount",
    "description":"Unmounts a zip file or folder previously mounted for reading with love.filesystem.mount."
  },
  "love.graphics.arc":{
    "type":"function",
    "snippet":"love.graphics.arc(${1:mode}, ${2:x}, ${3:y}, ${4:radius}, ${5:angle1}, ${6:angle2}, ${7:segments})",
    "url":"https://love2d.org/wiki/love.graphics.arc",
    "description":"Draws an arc."
  },
  "love.filesystem.isFused":{
    "type":"function",
    "snippet":"love.filesystem.isFused()",
    "url":"https://love2d.org/wiki/love.filesystem.isFused",
    "description":"Gets whether the game is in fused mode or not.\n\nIf a game is in fused mode, its save directory will be directly in the Appdata directory instead of Appdata/LOVE/. The game will also be able to load C Lua dynamic libraries which are located in the save directory.\n\nA game is in fused mode if the source .love has been fused to the executable (see Game Distribution), or if \"--fused\" has been given as a command-line argument when starting the game."
  },
  "love.keyboard.hasTextInput":{
    "type":"function",
    "snippet":"love.keyboard.hasTextInput()",
    "url":"https://love2d.org/wiki/love.keyboard.hasTextInput",
    "description":"Gets whether text input events are enabled."
  },
  "love.image":{
    "type":"module",
    "url":"https://love2d.org/wiki/love.image",
    "description":"Provides an interface to decode encoded image data."
  },
  "love.graphics.newShader":{
    "type":"function",
    "snippet":"love.graphics.newShader(${1:code})",
    "url":"https://love2d.org/wiki/love.graphics.newShader",
    "description":"Creates a new Shader object for hardware-accelerated vertex and pixel effects. A Shader contains either vertex shader code, pixel shader code, or both.\n\nVertex shader code must contain at least one function, named position, which is the function that will produce transformed vertex positions of drawn objects in screen-space.\n\nPixel shader code must contain at least one function, named effect, which is the function that will produce the color which is blended onto the screen for each pixel a drawn object touches."
  },
  "love.graphics.setDefaultFilter":{
    "type":"function",
    "snippet":"love.graphics.setDefaultFilter(${1:min}, ${2:mag}, ${3:anisotropy})",
    "url":"https://love2d.org/wiki/love.graphics.setDefaultFilter",
    "description":"Sets the default scaling filters used with Images, Canvases, and Fonts.\n\nThis function does not apply retroactively to loaded images."
  },
  "love.graphics.getColorMask":{
    "type":"function",
    "snippet":"love.graphics.getColorMask()",
    "url":"https://love2d.org/wiki/love.graphics.getColorMask",
    "description":"Gets the active color components used when drawing. Normally all 4 components are active unless love.graphics.setColorMask has been used.\n\nThe color mask determines whether individual components of the colors of drawn objects will affect the color of the screen. They affect love.graphics.clear and Canvas:clear as well."
  },
  "love.graphics.getCanvas":{
    "type":"function",
    "snippet":"love.graphics.getCanvas()",
    "url":"https://love2d.org/wiki/love.graphics.getCanvas",
    "description":"Gets the current target Canvas."
  },
  "love.filesystem.read":{
    "type":"function",
    "snippet":"love.filesystem.read(${1:name}, ${2:bytes})",
    "url":"https://love2d.org/wiki/love.filesystem.read",
    "description":"Read the contents of a file."
  },
  "love.graphics.getStats":{
    "type":"function",
    "snippet":"love.graphics.getStats()",
    "url":"https://love2d.org/wiki/love.graphics.getStats",
    "description":"Gets performance-related rendering statistics."
  },
  "love.mouse.newCursor":{
    "type":"function",
    "snippet":"love.mouse.newCursor(${1:imageData}, ${2:hotx}, ${3:hoty})",
    "url":"https://love2d.org/wiki/love.mouse.newCursor",
    "description":"Creates a new hardware Cursor object from an image file or ImageData.\n\nHardware cursors are framerate-independent and work the same way as normal operating system cursors. Unlike drawing an image at the mouse's current coordinates, hardware cursors never have visible lag between when the mouse is moved and when the cursor position updates, even at low frameratesn\n\nThe hot spot is the point the operating system uses to determine what was clicked and at what position the mouse cursor is. For example, the normal arrow pointer normally has its hot spot at the top left of the image, but a crosshair cursor might have it in the middle."
  },
  "love.graphics.circle":{
    "type":"function",
    "snippet":"love.graphics.circle(${1:mode}, ${2:x}, ${3:y}, ${4:radius}, ${5:segments})",
    "url":"https://love2d.org/wiki/love.graphics.circle",
    "description":"Draws a circle."
  },
  "love.graphics.getHeight":{
    "type":"function",
    "snippet":"love.graphics.getHeight()",
    "url":"https://love2d.org/wiki/love.graphics.getHeight",
    "description":"Gets the height of the window."
  },
  "love.event":{
    "type":"module",
    "url":"https://love2d.org/wiki/love.event",
    "description":"Manages events, like keypresses."
  }
}